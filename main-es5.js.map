{"version":3,"sources":["webpack:///$_lazy_route_resource lazy namespace object","webpack:///src/app/app-routing.module.ts","webpack:///src/app/app.component.ts","webpack:///src/app/app.component.html","webpack:///src/app/app.module.ts","webpack:///src/app/components/candidate-info/candidate-info.component.ts","webpack:///src/app/components/candidate-info/candidate-info.component.html","webpack:///src/app/components/choose-role/choose-role.component.ts","webpack:///src/app/components/choose-role/choose-role.component.html","webpack:///src/app/components/google-places/google-places.component.ts","webpack:///src/app/components/google-places/google-places.component.html","webpack:///src/app/components/home/home.component.ts","webpack:///src/app/components/home/home.component.html","webpack:///src/app/components/job-details/job-details.component.ts","webpack:///src/app/components/job-details/job-details.component.html","webpack:///src/app/components/job-edit/job-edit.component.ts","webpack:///src/app/components/job-edit/job-edit.component.html","webpack:///src/app/components/job-summary/job-summary.component.ts","webpack:///src/app/components/job-summary/job-summary.component.html","webpack:///src/app/components/profile/profile.component.ts","webpack:///src/app/components/profile/profile.component.html","webpack:///src/app/components/sidebar/sidebar.component.ts","webpack:///src/app/components/sidebar/sidebar.component.html","webpack:///src/app/components/signin/signin.component.ts","webpack:///src/app/components/signin/signin.component.html","webpack:///src/app/components/signup/signup.component.ts","webpack:///src/app/components/signup/signup.component.html","webpack:///src/app/components/topnav/topNavigation.component.ts","webpack:///src/app/services/data.service.ts","webpack:///src/environments/environment.ts","webpack:///src/main.ts"],"names":["webpackEmptyAsyncContext","req","Promise","resolve","then","e","Error","code","keys","module","exports","id","routes","path","component","AppRoutingModule","forRoot","imports","AppComponent","dataService","router","toastr","inAction","title","openLogin","email","signin","show","saveSession","session","navigateToHome","removeToken","reset","navigate","err","error","message","inSession","selector","templateUrl","styleUrls","AppModule","newestOnTop","autoDismiss","maxOpened","declarations","providers","bootstrap","CandidateInfoComponent","likable","liked","like","emit","candidate","idx","ChooseRoleComponent","httpClient","newRole","industries","chooseRoleModal","hide","loading","get","pipe","subscribe","res","add","refId","headerId","refHeader","role","GooglePlacesComponent","setAddress","autocompleteInput","init","autocomplete","google","maps","places","Autocomplete","addresstext","nativeElement","types","event","addListener","place","getPlace","HomeComponent","jobs","job","jobId","state","$event","JobDetailsComponent","route","getJob","details","edit","origin","candidates","available","push","matched","splice","offered","post","success","snapshot","paramMap","JobEditComponent","getRole","roleId","chooseRole","updateData","getCurrentNavigation","extras","workLocation","address","formatted_address","longitude","latitude","JobSummaryComponent","ProfileComponent","profile","employerProfile","status","statusText","getUserProfile","Object","assign","SidebarComponent","elementRef","logout","menu","querySelector","open","close","addEventListener","classList","toggle","SigninComponent","password","loginModal","login","SignupComponent","signedUp","mode","employerSignupModal","employeeSignupModal","register","formValue","employerData","form","value","password2","payload","userType","TopNavigationComponent","DataService","client","host","config","responseType","headers","token","authorization","userId","undefined","providedIn","environment","production","console"],"mappings":"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","file":"main-es5.js","sourcesContent":["function webpackEmptyAsyncContext(req) {\n\t// Here Promise.resolve().then() is used instead of new Promise() to prevent\n\t// uncaught exception popping up in devtools\n\treturn Promise.resolve().then(function() {\n\t\tvar e = new Error(\"Cannot find module '\" + req + \"'\");\n\t\te.code = 'MODULE_NOT_FOUND';\n\t\tthrow e;\n\t});\n}\nwebpackEmptyAsyncContext.keys = function() { return []; };\nwebpackEmptyAsyncContext.resolve = webpackEmptyAsyncContext;\nmodule.exports = webpackEmptyAsyncContext;\nwebpackEmptyAsyncContext.id = \"./$$_lazy_route_resource lazy recursive\";","import {NgModule} from '@angular/core';\nimport {Routes, RouterModule} from '@angular/router';\nimport {JobDetailsComponent} from './components/job-details/job-details.component';\nimport {HomeComponent} from './components/home/home.component';\nimport {ProfileComponent} from './components/profile/profile.component';\nimport {JobEditComponent} from './components/job-edit/job-edit.component';\n\nconst routes: Routes = [\n  {path: 'jobs', component: HomeComponent},\n  {path: 'jobs/:id', component: JobDetailsComponent},\n  {path: 'jobs/:id/edit', component: JobEditComponent},\n  {path: 'profile', component: ProfileComponent},\n];\n\n@NgModule({\n  imports: [RouterModule.forRoot(routes)],\n  exports: [RouterModule]\n})\nexport class AppRoutingModule {}\n","import {Component, OnInit, ViewChild} from '@angular/core';\nimport {SignupComponent} from './components/signup/signup.component';\nimport {SigninComponent} from './components/signin/signin.component';\nimport {DataService} from './services/data.service';\nimport {Router} from '@angular/router';\nimport {ToastrService} from 'ngx-toastr';\nimport {Token} from './models/Signup.interface';\n\n@Component({\n  selector: 'app-root',\n  templateUrl: './app.component.html',\n  styleUrls: ['./app.component.scss']\n})\nexport class AppComponent implements OnInit {\n  @ViewChild('signup') public signup: SignupComponent;\n  @ViewChild('signin') public signin: SigninComponent;\n\n  constructor(private dataService: DataService, private router: Router, private toastr: ToastrService) {}\n\n  public inAction = false;\n  public title = 'GreatJob';\n\n  public openLogin = (email) => {\n    this.signin.show(email);\n  };\n\n  private navigateToHome() {\n    this.inAction = true;\n\n    this\n    .router\n    .navigate(['/jobs'])\n    .catch((err: Error) => {\n      this.toastr.error(err.message, 'Something failed');\n    });\n  }\n\n  public saveSession = (session: Token) => {\n    this.dataService.saveSession(session);\n    this.navigateToHome();\n  };\n\n  public removeToken = () => {\n    this.dataService.reset();\n    this.inAction = false;\n  };\n\n  ngOnInit(): void {\n    if (this.dataService.inSession) {\n      this.navigateToHome();\n    }\n  }\n}\n","<body>\n<div *ngIf=\"!inAction\" class=\"portal\">\n  <div class=\"portal-content\">\n    <img style=\"width: 15vh; margin-bottom: 20px; min-width: 120px;\" src=\"../assets/image/gjobwhite.gif\" alt=\"great-job-logo\">\n    <h1 class=\"text-white\">Welcome to Great Job</h1>\n    <h2 class=\"text-white\">Need work? Need People? Just click and connect</h2>\n    <div class=\"gate\">\n      <div class=\"text-white grid-vertical\">\n        <h3> I want to Hire </h3>\n        <button class=\"btn .btn-lg btn-warning\" (click)=\"signup.show('employer')\">Don't have account?</button>\n        <button class=\"btn .btn-lg btn-success\" (click)=\"signin.show()\">Employer Sign In</button>\n      </div>\n      <div class=\"ls\"></div>\n      <div class=\"text-white grid-vertical\">\n        <h3> I want to Work </h3>\n        <button class=\"btn .btn-lg btn-outline-warning\" (click)=\"signup.show('employee')\">Don't have account?</button>\n        <button class=\"btn .btn-lg btn-outline-success\" (click)=\"signup.show('employee')\">Employee Sign In</button>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div id=\"main-screen\" *ngIf=\"inAction\">\n  <app-sidebar id=\"sidebar\" (logout)=\"removeToken()\"></app-sidebar>\n  <app-topnav></app-topnav>\n  <router-outlet></router-outlet>\n</div>\n<app-signup #signup (signedUp)=\"openLogin($event)\"></app-signup>\n<app-signin #signin (session)=\"saveSession($event)\"></app-signin>\n</body>\n","import {BrowserModule} from '@angular/platform-browser';\nimport {NgModule} from '@angular/core';\nimport {ModalModule, BsModalRef} from 'ngx-bootstrap/modal';\nimport {TabsModule} from 'ngx-bootstrap/tabs';\nimport {FormsModule} from '@angular/forms';\nimport {ToastrModule} from 'ngx-toastr';\nimport {HttpClientModule} from '@angular/common/http';\n\nimport {AppRoutingModule} from './app-routing.module';\nimport {AppComponent} from './app.component';\nimport {SignupComponent} from './components/signup/signup.component';\nimport {BrowserAnimationsModule} from '@angular/platform-browser/animations';\nimport {SigninComponent} from './components/signin/signin.component';\nimport {HomeComponent} from './components/home/home.component';\nimport {SidebarComponent} from './components/sidebar/sidebar.component';\nimport {TopNavigationComponent} from './components/topnav/topNavigation.component';\nimport {JobSummaryComponent} from './components/job-summary/job-summary.component';\nimport {JobDetailsComponent} from './components/job-details/job-details.component';\nimport {DataService} from './services/data.service';\nimport {CandidateInfoComponent} from './components/candidate-info/candidate-info.component';\nimport {ProfileComponent} from './components/profile/profile.component';\nimport {JobEditComponent} from './components/job-edit/job-edit.component';\nimport {ChooseRoleComponent} from './components/choose-role/choose-role.component';\nimport {GooglePlacesComponent} from './components/google-places/google-places.component';\nimport {MatDatepickerModule} from '@angular/material/datepicker';\nimport {MatNativeDateModule} from '@angular/material/core';\n\n@NgModule({\n  declarations: [\n    AppComponent,\n    SignupComponent,\n    SigninComponent,\n    HomeComponent,\n    SidebarComponent,\n    TopNavigationComponent,\n    JobSummaryComponent,\n    JobDetailsComponent,\n    CandidateInfoComponent,\n    ProfileComponent,\n    JobEditComponent,\n    ChooseRoleComponent,\n    GooglePlacesComponent,\n  ],\n  imports: [\n    MatDatepickerModule,\n    MatNativeDateModule,\n    BrowserModule,\n    HttpClientModule,\n    FormsModule,\n    AppRoutingModule,\n    BrowserAnimationsModule,\n    ModalModule.forRoot(),\n    TabsModule.forRoot(),\n    ToastrModule.forRoot({\n      newestOnTop: true,\n      autoDismiss: true,\n      maxOpened: 3,\n    }),\n  ],\n  providers: [BsModalRef, DataService],\n  bootstrap: [AppComponent]\n})\nexport class AppModule {}\n","import {Component, EventEmitter, Input, Output} from '@angular/core';\nimport {Employee} from '../../models/Job.interface';\n\n@Component({\n  selector: 'app-candidate-info',\n  templateUrl: './candidate-info.component.html',\n  styleUrls: ['./candidate-info.component.scss']\n})\nexport class CandidateInfoComponent {\n  @Input() candidate: Employee;\n  @Input() idx: number;\n  @Input() likable = true;\n  @Output() liked = new EventEmitter<{\n    candidate: Employee;\n    idx: number;\n  }>();\n\n  public like = () => {\n    this.liked.emit({\n      candidate: this.candidate,\n      idx: this.idx,\n    });\n  };\n}\n","<button *ngIf=\"likable\" class=\"float-right bg-transparent\" id=\"likeBtn\" (click)=\"like()\">\n  <i class=\"fa fa-2x fa-heart-o\" id=\"heartIcon\" style=\"color: red; padding: 10px;\"></i>\n</button>\n\n<div class=\"row filled\">\n  <div class=\"row\" *ngIf=\"candidate?.lastName\">\n    <i class=\"icon-inline fa fa-pencil-square\"></i>\n    <div class=\"text-description\">\n      {{candidate?.firstName}} {{candidate?.lastName}}\n    </div>\n  </div>\n  <div class=\"row\" *ngIf=\"candidate?.payRateFrom\">\n    <i class=\"icon-inline fa fa-gbp\"></i>\n    <div class=\"text-description\">\n      {{candidate?.payRateFrom}}\n    </div>\n  </div>\n  <div class=\"row padding6\" *ngIf=\"candidate?.phoneNumber\">\n    <i class=\"icon-inline fa fa-phone\"></i>\n    <div class=\"text-description special\">\n      {{candidate?.phoneNumber}}\n    </div>\n  </div>\n  <div class=\"row\" *ngIf=\"candidate?.location\">\n    <i class=\"icon-inline fa fa-globe\"></i>\n    <div class=\"text-description\">\n      {{candidate?.location?.address}}\n    </div>\n  </div>\n  <div class=\"row padding6\" *ngIf=\"candidate?.bio\">\n    <div class=\"text-description special\">\n      {{candidate?.bio}}\n    </div>\n  </div>\n</div>\n","import {Component, OnInit, ViewChild, Output, EventEmitter, Input} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {DataService} from '../../services/data.service';\nimport {ToastrService} from 'ngx-toastr';\nimport {get} from 'lodash';\nimport {Router, ChildActivationStart} from '@angular/router';\nimport {Role, Industry} from '../../models/Industry.interface';\nimport {ModalDirective} from 'ngx-bootstrap/modal';\n\n@Component({\n  selector: 'app-choose-role',\n  templateUrl: './choose-role.component.html',\n  styleUrls: ['./choose-role.component.scss']\n})\nexport class ChooseRoleComponent implements OnInit {\n  @Output() newRole = new EventEmitter<Role>();\n  @ViewChild('chooseRoleModal') public chooseRoleModal: ModalDirective;\n  @Input() idx: any;\n  public id: string;\n  public refId: string;\n  public headerId: string;\n  public refHeader: string;\n\n  constructor(\n    private toastr: ToastrService,\n    private httpClient: DataService,\n  ) { }\n\n  public loading: boolean;\n  public industries: Industry[] = [];\n  public show = () => {\n    this.chooseRoleModal.show();\n  };\n\n  ngOnInit(): void {\n    this.loading = true;\n    this\n      .httpClient\n      .get('roles?reverse=true')\n      .pipe(take(1))\n      .subscribe((res: Industry[]) => {\n        this.industries = res || [];\n      }, (err) => {\n        this.toastr.error(get(err, 'error.message') || 'Apologize. Something happened ...');\n      })\n      .add(() => {\n        this.loading = false;\n      });\n    this.id = `industry-${this.idx}`;\n    this.refId = `#${this.id}`;\n    this.headerId = `header-${this.id}`;\n    this.refHeader = `#${this.headerId}`;\n  }\n\n  public changeRole(role: Role) {\n    this.newRole.emit(role);\n  }\n\n  public hide = () => {\n    this.chooseRoleModal.hide();\n  };\n}\n","<div bsModal\n     #chooseRoleModal=\"bs-modal\"\n     class=\"modal fade\"\n     tabindex=\"-1\"\n     role=\"dialog\"\n     [config]=\"{backdrop: 'static', keyboard: true}\"\n     aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\" id=\"accordion\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h2 class=\"modal-title centeredTitle\">Choose Role</h2>\n        <button type=\"button\" class=\"close\" (click)=\"chooseRoleModal.hide()\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body mx-3\">\n        <div class=\"accordion\">\n          <div *ngFor=\"let industry of industries; let idx = index\">\n              <div class=\"card z-depth-0 bordered\">\n                <div class=\"card-header\" [id]=\"'ref_industry_' + idx\">\n                  <h5 class=\"mb-0\">\n                    <button class=\"btn btn-link\" type=\"button\" data-toggle=\"collapse\" [attr.data-target]=\"'#industry_' + idx\" aria-expanded=\"true\"\n                    [attr.aria-controls]=\"'#ref_industry_' + idx\">\n                      {{industry.industryName}}\n                    </button>\n                  </h5>\n                </div>\n                <div class=\"collapse\" [id]=\"'industry_' + idx\" [attr.aria-labelledby]=\"'#ref_industry_' + idx\" data-parent=\"#accordion\">\n                  <div class=\"card-body\">\n                    <div class=\"role-row\" *ngFor=\"let role of industry.roles\">\n                      <button (click)=\"changeRole(role)\" class=\"w-100 btn btn-outline-success\">\n                        {{role.roleName}}\n                      </button>\n                    </div>\n                  </div>\n                </div>\n              </div>\n            </div>\n          </div>\n      </div>\n    </div>\n  </div>\n</div>\n","/// <reference types=\"@types/googlemaps\" />\nimport {Component, ViewChild, EventEmitter, Output, OnInit, AfterViewInit, Input} from '@angular/core';\nimport {} from 'googlemaps';\n\n@Component({\n  selector: 'app-google-places',\n  templateUrl: './google-places.component.html',\n  styleUrls: ['../job-edit/job-edit.component.scss']\n})\nexport class GooglePlacesComponent implements OnInit, AfterViewInit {\n  @Input() init: string;\n  @Output() setAddress: EventEmitter<any> = new EventEmitter();\n  @ViewChild('addresstext') addresstext: any;\n\n  autocompleteInput: string;\n\n  ngOnInit(): void {\n    this.autocompleteInput = this.init;\n  }\n\n  ngAfterViewInit() {\n    const autocomplete = new google.maps.places.Autocomplete(this.addresstext.nativeElement,\n      {\n        types: ['geocode']  // 'establishment' / 'address' / 'geocode'\n      });\n\n    google.maps.event.addListener(autocomplete, 'place_changed', () => {\n      const place = autocomplete.getPlace();\n      this.setAddress.emit(place);\n    });\n  }\n}\n","<input class=\"flex-grow-1\" type=\"text\" [(ngModel)]=\"autocompleteInput\" #addresstext\n       style=\"width: 100%; margin-left: 0; padding-left: 20px\">\n","import {Component, OnInit} from '@angular/core';\nimport {take} from 'rxjs/operators';\nimport {DataService} from '../../services/data.service';\nimport {ToastrService} from 'ngx-toastr';\nimport {get} from 'lodash';\nimport {Router} from '@angular/router';\nimport {Job} from '../../models/Job.interface';\n\n@Component({\n  selector: 'app-home',\n  templateUrl: './home.component.html',\n  styleUrls: ['./home.component.scss']\n})\nexport class HomeComponent implements OnInit {\n  constructor(\n    private toastr: ToastrService,\n    private httpClient: DataService,\n    private router: Router,\n  ) {}\n\n  public loading: boolean;\n  public jobs: Job[] = [];\n\n  ngOnInit(): void {\n    this.loading = true;\n    this\n      .httpClient\n      .get('job/offers')\n      .pipe(take(1))\n      .subscribe((res: any[]) => {\n        this.jobs = res || [];\n      }, (err) => {\n        this.toastr.error(get(err, 'error.message') || 'Apologize. Something happened ...');\n      })\n      .add(() => {\n        this.loading = false;\n      });\n  }\n\n  public edit(job: Job): void {\n    this\n      .router\n      .navigate([`/jobs/${job.jobId}/edit`], {\n        state: job\n      })\n      .catch((err) => {\n        this.toastr.error(get(err, 'error.message') || 'Apologize. Something happened ...');\n      });\n  }\n}\n","<div class=\"container\">\n  <h1 class=\"page-title\">\n    Posted offers\n  </h1>\n  <menu id=\"accordion\" *ngIf=\"!loading\">\n    <div *ngFor=\"let job of jobs; let idx = index\">\n      <div class=\"card\">\n        <div class=\"card-header\" [id]=\"'ref_job_' + idx\">\n          <h5 class=\"mb-0\">\n            <button class=\"btn btn-link col-sm-10\" data-toggle=\"collapse\" [attr.data-target]=\"'#job_' + idx\" aria-expanded=\"true\"\n                    [attr.aria-controls]=\"'#ref_job_' + idx\">\n              {{job.jobTitle}}\n              <span *ngIf=\"job?.accomodation\" class=\"badge badge-pill badge-primary\">Accomodation</span>\n              <span *ngIf=\"job?.bonus\" class=\"badge badge-pill badge-info\">Bonus</span>\n              <span *ngIf=\"job?.active\" class=\"badge badge-pill badge-success\">Open</span>\n            </button>\n            <button class=\"btn float-right btn-warning leftMargined\" (click)=\"edit(job)\">Edit</button>\n            <a [routerLink]=\"'/jobs/' + job.jobId\" class=\"btn float-right btn-primary leftMargined\">Details</a>\n          </h5>\n        </div>\n\n        <div [id]=\"'job_' + idx\" class=\"collapse show\" [attr.aria-labelledby]=\"'#ref_job_' + idx\">\n          <div class=\"card-body\">\n            <app-job-summary [job]=\"job\"></app-job-summary>\n          </div>\n        </div>\n      </div>\n    </div>\n  </menu>\n\n  <div class=\"col text-center\" *ngIf=\"loading\">\n    <span class=\"spinner-border text-white\"></span>\n  </div>\n</div>\n","import {Component, OnInit} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {DataService} from '../../services/data.service';\nimport {take} from 'rxjs/operators';\nimport {get} from 'lodash';\nimport {ToastrService} from 'ngx-toastr';\nimport {Employee, Job, JobDetails} from '../../models/Job.interface';\n\n@Component({\n  selector: 'app-job-details',\n  templateUrl: './job-details.component.html',\n  styleUrls: ['./job-details.component.scss']\n})\nexport class JobDetailsComponent implements OnInit {\n\n  constructor(\n    private route: ActivatedRoute,\n    private httpClient: DataService,\n    private toastr: ToastrService,\n    private router: Router\n  ) {}\n\n  private jobId: string;\n  public job: JobDetails;\n  public loading: boolean;\n\n  private getJob = () => {\n    this.loading = true;\n\n    this\n      .httpClient\n      .get(`job/${this.jobId}/details`)\n      .pipe(take(1))\n      .subscribe((details: JobDetails) => {\n        this.job = details;\n      }, (err) => {\n        this.toastr.error(get(err, 'error.message') || 'Apologize. Something happened ...');\n      })\n      .add(() => {\n        this.loading = false;\n      });\n  };\n\n  ngOnInit(): void {\n    this.loading = true;\n    this.jobId = this.route.snapshot.paramMap.get('id');\n    this.getJob();\n  }\n\n  public edit = (job: Job): void => {\n    this\n      .router\n      .navigate([`/jobs/${job.jobId}/edit`], {\n        state: job\n      })\n      .catch((err) => {\n        this.toastr.error(get(err, 'error.message') || 'Apologize. Something happened ...');\n      });\n  };\n\n  public liked = (origin: 'matched'|'connections', {candidate, idx}) => {\n    // Moving candidate to the new list ahead of time, since liked/ offered screen has no CTA\n    if (origin === 'matched') {\n      this.job.candidates.available.push(...this.job.candidates.matched.splice(idx, 1));\n    } else {\n      this.job.candidates.offered.push(...this.job.candidates.liked.splice(idx, 1));\n    }\n\n    this\n      .httpClient\n      .post(`job/${this.jobId}/offer/${candidate.id}`)\n      .pipe(take(1))\n      .subscribe(() => {\n        this.toastr.success('Liked');\n      }, (err) => {\n        this.toastr.error(get(err, 'error.message') || 'Apologize. Something happened ...');\n        this.getJob();\n      });\n  };\n}\n","<div class=\"container\" *ngIf=\"!loading\">\n  <h2 class=\"row header\">\n    {{job?.jobDetail?.jobTitle}}\n    <span *ngIf=\"job?.jobDetail?.accomodation\" class=\"badge badge-pill badge-primary\">Accomodation</span>\n    <span *ngIf=\"job?.jobDetail?.bonus\" class=\"badge badge-pill badge-info\">Bonus</span>\n    <span *ngIf=\"job?.jobDetail?.active\" class=\"badge badge-pill badge-success\">Open</span>\n\n    <button class=\"btn float-right btn-warning leftMargined\" (click)=\"edit(job?.jobDetail)\">Edit</button>\n  </h2>\n\n  <div id=\"jobInfo\" class=\"row\">\n    <app-job-summary [job]=\"job?.jobDetail\"></app-job-summary>\n  </div>\n\n  <h2 class=\"row header\">\n    Connections\n  </h2>\n\n  <tabset [justified]=\"true\">\n    <tab [heading]=\"'Matched (' + (job?.candidates?.matched?.length || 0) + ')'\" id=\"tab1\">\n      <div *ngFor=\"let employee of job?.candidates?.matched; let idx = index;\" class=\"row candidate\">\n        <app-candidate-info\n          (liked)=\"liked('matched', $event)\"\n          class=\"w-100\"\n          [idx]=\"idx\"\n          [candidate]=\"employee\">\n        </app-candidate-info>\n      </div>\n    </tab>\n    <tab [heading]=\"'Liked (' + (job?.candidates?.available?.length || 0) + ')'\">\n      <div *ngFor=\"let employee of job?.candidates?.available\" class=\"row candidate\">\n        <app-candidate-info\n          class=\"w-100\"\n          [likable]=\"false\"\n          [candidate]=\"employee\">\n        </app-candidate-info>\n      </div>\n    </tab>\n    <tab [heading]=\"'Offered (' + (job?.candidates?.offered?.length || 0) + ')'\">\n      <div *ngFor=\"let employee of job?.candidates?.offered\" class=\"row candidate\">\n        <app-candidate-info\n          class=\"w-100\"\n          [likable]=\"false\"\n          [candidate]=\"employee\">\n        </app-candidate-info>\n      </div>\n    </tab>\n    <tab [heading]=\"'Connections (' + (job?.candidates?.liked?.length || 0) + ')'\">\n      <div *ngFor=\"let employee of job?.candidates?.liked; let idx = index;\" class=\"row candidate\">\n        <app-candidate-info\n          (liked)=\"liked('connections', $event)\"\n          class=\"w-100\"\n          [idx]=\"idx\"\n          [candidate]=\"employee\">\n        </app-candidate-info>\n      </div>\n    </tab>\n  </tabset>\n</div>\n\n<div class=\"container text-center\" *ngIf=\"loading\">\n  <span class=\"spinner-border text-white\"></span>\n</div>\n","import {DataService} from '../../services/data.service';\nimport {ChooseRoleComponent} from '../choose-role/choose-role.component';\nimport {Component, OnInit, ViewChild, Output} from '@angular/core';\nimport {ActivatedRoute, Router} from '@angular/router';\nimport {Job} from '../../models/Job.interface';\nimport {Role} from '../../models/Industry.interface';\nimport {ToastrService} from 'ngx-toastr';\nimport {take} from 'rxjs/operators';\nimport {get} from 'lodash';\n\n@Component({\n  selector: 'app-job-edit',\n  templateUrl: './job-edit.component.html',\n  styleUrls: ['./job-edit.component.scss']\n})\nexport class JobEditComponent implements OnInit {\n\n  constructor(\n    private router: Router,\n    private route: ActivatedRoute,\n    private toastr: ToastrService,\n    private httpClient: DataService,\n  ) {\n    // navigation properties has to be called within constructors\n    this.job = this.router.getCurrentNavigation().extras.state as Job;\n  }\n\n  @ViewChild('chooseRole') public chooseRole: ChooseRoleComponent;\n  public job: Job;\n  public loading: boolean;\n\n  ngOnInit(): void {\n    const id = this.route.snapshot.paramMap.get('id');\n\n    // we save token within data service,\n    // url refresh will kill the service, the call will get a 401\n    // better to reroute to home page\n    if (this.job && this.job.jobId === id) {\n      this.job.roleId = this.job.role.roleId;\n      return;\n    }\n\n    this\n      .router\n      .navigate(['#'])\n      .catch((err) => {\n        this.toastr.error(get(err, 'error.message') || 'Apologize. Something happened ...');\n      });\n  }\n\n  public getRole = (role: Role) => {\n    this.job.role = role;\n    this.job.roleId = role.roleId;\n    this.chooseRole.hide();\n  };\n\n  public updateData = () => {\n    this.loading = true;\n    return this\n      .httpClient\n      .post(`job/edit/${this.job.jobId}`, this.job)\n      .pipe(take(1))\n      .subscribe(() => {\n        this.toastr.success('Job updated');\n        this.httpClient.get('job').pipe(take(1));\n      }, (err) => {\n        this.toastr.error(get(err, 'error.message') || 'Apologize. Something happened ...');\n      })\n      .add(() => {\n        this.loading = false;\n      });\n  };\n\n  getAddress(place) {\n    this.job.workLocation = {\n      address: place.formatted_address,\n      longitude: get(place, 'geometry.location.lng')(),\n      latitude: get(place, 'geometry.location.lat')(),\n    };\n  }\n}\n","<div class=\"container text-center\" *ngIf=\"loading\">\n  <span class=\"spinner-border text-white\"></span>\n</div>\n<div class=\"container\" *ngIf=\"!loading\">\n  <h1 class=\"row page-title\">\n    Edit Job\n  </h1>\n\n  <form class=\"profile-details\" ngNativeValidate (submit)=\"updateData()\">\n    <div class=\"no-flex\">\n      <div class=\"col\">\n        <label for=\"id\">Job Id: </label>\n        <p id=\"id\">{{job.jobId}}</p>\n      </div>\n    </div>\n    <div class=\"row\">\n      <div class=\"col\">\n        <label for=\"jobTitle\">Job Title: </label>\n        <input class=\"flex-grow-1\" id=\"jobTitle\" name=\"jobTitle\" [(ngModel)]=\"job.jobTitle\"/>\n      </div>\n      <div class=\"col\">\n        <label for=\"contactName\">Contact Name: </label>\n        <input class=\"flex-grow-1\" id=\"contactName\" name=\"contactName\" [(ngModel)]=\"job.contactName\"/>\n      </div>\n      <div class=\"col\">\n        <label for=\"contactNumber\">Contact Number: </label>\n        <input class=\"flex-grow-1\" type=\"tel\" id=\"contactNumber\" name=\"contactNumber\" [(ngModel)]=\"job.contactNumber\"/>\n      </div>\n      <div class=\"col\">\n        <label for=\"contactEmail\">Contact Email: </label>\n        <input class=\"flex-grow-1\" type=\"email\" id=\"contactEmail\" name=\"contactEmail\" [(ngModel)]=\"job.contactEmail\"/>\n      </div>\n      <div class=\"inline w-100\">\n        <div>\n          <label for=\"startDate\">Start Date: </label>\n          <input name=\"startDate\" id=\"startDate\" [matDatepicker]=\"myDatepicker\" [(ngModel)]=\"job.startDate\">\n          <mat-datepicker-toggle [for]=\"myDatepicker\"></mat-datepicker-toggle>\n          <mat-datepicker #myDatepicker></mat-datepicker>\n        </div>\n        <div>\n          <label for=\"payRate\">Pay Rate: </label>\n          <input type=\"number\" min=\"1\" class=\"flex-grow-1\" id=\"payRate\" name=\"payRate\" [(ngModel)]=\"job.payRate\"/>\n        </div>\n      </div>\n      <div class=\"col\">\n        <label for=\"description\">Job Description: </label>\n        <input class=\"flex-grow-1\" id=\"description\" name=\"description\" [(ngModel)]=\"job.description\"/>\n      </div>\n      <div class=\"col\">\n        <label>Location: </label>\n        <app-google-places\n          [init]=\"job?.workLocation?.address\"\n          (setAddress)=\"getAddress($event)\">\n        </app-google-places>\n      </div>\n      <div class=\"col spec\">\n        <div style=\"display: flex;\">\n          <label for=\"role\">Role: </label>\n          <p id=\"role\">\n            {{job.role.roleName}}\n          </p>\n        </div>\n        <button type=\"button\" class=\"btn btn-warning\" (click)=\"chooseRole.show()\">Choose Role</button>\n      </div>\n    </div>\n    <div class=\"row\">\n      <button type=\"submit\" class=\"btn btn-success\">Update Information</button>\n    </div>\n  </form>\n</div>\n\n<app-choose-role (newRole)=\"getRole($event)\" #chooseRole></app-choose-role>\n","import {Component, Input, OnInit} from '@angular/core';\nimport {Job} from '../../models/Job.interface';\n\n@Component({\n  selector: 'app-job-summary',\n  templateUrl: './job-summary.component.html',\n  styleUrls: ['./job-summary.component.scss']\n})\nexport class JobSummaryComponent implements OnInit {\n  @Input() job: Job;\n  @Input() idx: any;\n\n  public id: string;\n  public refId: string;\n  public headerId: string;\n  public refHeader: string;\n\n  ngOnInit(): void {\n    this.id = `job-${this.idx}`;\n    this.refId = `#${this.id}`;\n    this.headerId = `header-${this.id}`;\n    this.refHeader = `#${this.headerId}`;\n  }\n}\n","<div id=summary class=\"row filled\">\r\n  <div class=\"row\" *ngIf=\"job?.payRate\">\r\n    <i class=\"icon-inline fa fa-gbp\"></i>\r\n    <div class=\"text-description\">\r\n      {{job?.payRate}}\r\n    </div>\r\n  </div>\r\n  <div class=\"row\" *ngIf=\"job?.contactName\">\r\n    <div class=\"col-sm-4\">\r\n      <i class=\"icon-inline fa fa-address-book\"></i>\r\n      <div class=\"text-description\">{{job.contactName}}</div>\r\n    </div>\r\n    <div class=\"col-sm-4\" *ngIf=\"job?.contactNumber\">\r\n      <i class=\"icon-inline fa fa-phone\"></i>\r\n      <div class=\"text-description\">{{job.contactNumber}}</div>\r\n    </div>\r\n    <div class=\"col-sm-4\" *ngIf=\"job?.contactEmail\">\r\n      <i class=\"icon-inline fa fa-envelope\"></i>\r\n      <div class=\"text-description\">{{job.contactEmail}}</div>\r\n    </div>\r\n  </div>\r\n  <div class=\"row\" *ngIf=\"job?.role?.roleName\">\r\n    <i class=\"icon-inline fa fa-briefcase\"></i>\r\n    <div class=\"text-description\">\r\n      {{job?.role?.roleName}}\r\n    </div>\r\n  </div>\r\n  <div class=\"row\" *ngIf=\"job?.workLocation?.address\">\r\n    <i class=\"icon-inline fa fa-building\"></i>\r\n    <div class=\"text-description\">\r\n      {{job?.workLocation?.address}}\r\n    </div>\r\n  </div>\r\n  <div class=\"row padding6\" *ngIf=\"job?.description\">\r\n    <div class=\"text-description special\">\r\n      {{job?.description}}\r\n    </div>\r\n  </div>\r\n</div>\r\n","import {EmployerProfile, Profile} from '../../models/Profile.interface';\nimport {Component, OnInit} from '@angular/core';\nimport {DataService} from '../../services/data.service';\nimport {ToastrService} from 'ngx-toastr';\nimport {take} from 'rxjs/operators';\nimport {get} from 'lodash';\n\n@Component({\n  selector: 'app-profile',\n  templateUrl: './profile.component.html',\n  styleUrls: ['./profile.component.scss']\n})\nexport class ProfileComponent implements OnInit {\n  public loading: boolean;\n  public id: string;\n  public email: string;\n  public profile: EmployerProfile = {};\n\n  constructor(private httpClient: DataService, private toastr: ToastrService) { }\n\n  ngOnInit(): void {\n    this.loading = true;\n\n    this\n      .httpClient\n      .getUserProfile()\n      .pipe(take(1))\n      .subscribe((res: Profile) => {\n        Object.assign(this.profile, res.employerProfile);\n        this.id = res.id;\n        this.email = res.email;\n      }, (err) => {\n        this.toastr.error(get(err, 'error.message') || 'Apologize. Something happened ...');\n      })\n      .add(() => {\n        this.loading = false;\n      });\n  }\n\n  public updateData = () => {\n    this.loading = true;\n\n    return this\n    .httpClient\n    .post('users/employer', this.profile)\n    .pipe(take(1))\n    .subscribe((res: Profile) => {\n      this.toastr.success('Profile updated');\n      this.profile = res.employerProfile || {};\n      this.id = res.id;\n      this.email = res.email;\n    }, (err) => {\n      const status = err.statusText || 'Apologize!';\n      const message = get(err, 'error.message') || get(err, 'error.title') || 'Something happened ...';\n\n      this.toastr.error(message, status);\n    })\n    .add(() => {\n      this.loading = false;\n    });\n  };\n}\n","<div class=\"container\">\n  <h1 class=\"row page-title\">\n    User profile\n  </h1>\n  <div class=\"container text-center\" *ngIf=\"loading\">\n    <span class=\"spinner-border text-white\"></span>\n  </div>\n  <div class=\"profile-details\" *ngIf=\"!loading\">\n    <div class=\"no-flex\">\n      <div class=\"col\">\n        <label for=\"id\">User Id: </label>\n        <p id=\"id\">{{id}}</p>\n      </div>\n      <div class=\"col\">\n        <label for=\"email\">Registered email: </label>\n        <p id=\"email\">{{email}}</p>\n      </div>\n    </div>\n    <form (submit)=\"updateData()\" ngNativeValidate>\n      <div class=\"row\">\n        <div class=\"col input-group\">\n          <label for=\"firstName\">First name: </label>\n          <input required class=\"flex-grow-1\" id=\"firstName\" name=\"firstName\" [(ngModel)]=\"profile.firstName\"/>\n        </div>\n        <div class=\"col input-group\">\n          <label for=\"lastName\">Last name: </label>\n          <input required class=\"flex-grow-1\" id=\"lastName\" name=\"lastName\" [(ngModel)]=\"profile.lastName\"/>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col input-group\">\n          <label for=\"companyName\">Company name: </label>\n          <input required class=\"flex-grow-1\" id=\"companyName\" name=\"companyName\" [(ngModel)]=\"profile.companyName\"/>\n        </div>\n        <div class=\"col input-group\">\n          <label for=\"companyNumber\">Company number: </label>\n          <input\n            required\n            pattern=\"^\\d+$\"\n            title=\"A sequence of numbers\" class=\"flex-grow-1\" id=\"companyNumber\" name=\"companyNumber\"\n            [(ngModel)]=\"profile.companyNumber\"/>\n        </div>\n      </div>\n      <div class=\"row\">\n        <div class=\"col input-group\">\n          <label for=\"landLine\">Land line: </label>\n          <input type=\"tel\" class=\"flex-grow-1\" id=\"landLine\" name=\"landLine\" [(ngModel)]=\"profile.landline\"/>\n        </div>\n        <div class=\"col input-group\">\n          <label for=\"mobile\">Mobile: </label>\n          <input type=\"tel\" class=\"flex-grow-1\" id=\"mobile\" name=\"mobile\" [(ngModel)]=\"profile.mobile\"/>\n        </div>\n        <div class=\"col input-group\">\n          <label for=\"website\">Website: </label>\n          <input type=\"url\" class=\"flex-grow-1\" id=\"website\" name=\"website\" [(ngModel)]=\"profile.website\"/>\n        </div>\n      </div>\n      <div class=\"row\">\n        <button type=\"submit\" class=\"btn btn-success\">Update Information</button>\n      </div>\n    </form>\n  </div>\n</div>\n","import {Component, AfterViewInit, ElementRef, ViewChild, Output, EventEmitter} from '@angular/core';\nimport {ModalDirective} from 'ngx-bootstrap/modal';\n\n@Component({\n  selector: 'app-sidebar',\n  templateUrl: './sidebar.component.html',\n  styleUrls: ['./sidebar.component.scss']\n})\nexport class SidebarComponent implements AfterViewInit {\n  @ViewChild('logoutModal') public logoutModal: ModalDirective;\n  @Output() logout = new EventEmitter();\n\n  constructor(private elementRef: ElementRef) {}\n\n  public ngAfterViewInit() {\n    const menu = this.elementRef.nativeElement.querySelector('.nav--open');\n    const open = this.elementRef.nativeElement.querySelector('.navbar--icon');\n    const close = this.elementRef.nativeElement.querySelector('.nav--open-icon');\n\n    if (open){\n      open.addEventListener('click', () => {\n        menu.classList.toggle('close');\n      });\n    }\n\n    if (close) {\n      close.addEventListener('click', () => {\n        menu.classList.toggle('close');\n      });\n    }\n  }\n\n  public removeToken() {\n    this.logout.emit();\n  }\n}\n","<div class=\"sticky-top\">\n  <input type=\"checkbox\" id=\"toggle\"/>\n  <label for=\"toggle\" class=\"fa fa-bars\"></label>\n  <nav>\n    <menu id=\"sidebar\">\n      <li>\n        <a routerLink=\"/jobs\"><i class=\"icon fa fa-list\"></i>Jobs</a>\n      </li>\n      <li>\n        <a  routerLink=\"/profile\"><i class=\"icon fa fa-user-o\"></i>Profile</a>\n      </li>\n      <li>\n        <button type=\"button\" id=\"signOutBtn\" (click)=\"logoutModal.show()\">\n          <a><i class=\"icon fa fa-sign-out\"></i>Sign Out</a>\n        </button>\n      </li>\n    </menu>\n  </nav>\n</div>\n\n<div bsModal\n     #logoutModal=\"bs-modal\"\n     class=\"modal fade\"\n     tabindex=\"-1\"\n     role=\"dialog\"\n     aria-hidden=\"true\">\n  <div class=\"modal-dialog\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h2 class=\"modal-title centeredTitle\">Log out</h2>\n        <button type=\"button\" class=\"close\" (click)=\"logoutModal.hide()\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-footer btn-group\">\n        <button type=\"button\" class=\"btn btn-secondary\" (click)=\"logoutModal.hide()\">Never mind</button>\n        <button type=\"button\" class=\"btn btn-default btn-primary\" (click)=\"removeToken()\">Logout!</button>\n      </div>\n    </div>\n  </div>\n</div>\n","import {Component, EventEmitter, Output, ViewChild} from '@angular/core';\nimport {ModalDirective} from 'ngx-bootstrap/modal';\nimport {DataService} from '../../services/data.service';\nimport {ToastrService} from 'ngx-toastr';\nimport {take} from 'rxjs/operators';\nimport {get} from 'lodash';\nimport {Token} from '../../models/Signup.interface';\n\n@Component({\n  selector: 'app-signin',\n  templateUrl: './signin.component.html',\n})\nexport class SigninComponent {\n  @Output() session = new EventEmitter<Token>();\n  @ViewChild('loginModal') public loginModal: ModalDirective;\n\n  public loading = false;\n  public email: string;\n  public password: string;\n\n  constructor(private toastr: ToastrService, private httpClient: DataService) {}\n\n  public show = (email = '', password = '') => {\n    this.email = email;\n    this.password = password;\n\n    this.loginModal.show();\n  };\n\n  public login = () => {\n    this.loading = true;\n    return this\n      .httpClient\n      .post('users/authenticate', {\n        email: this.email,\n        password: this.password,\n      })\n      .pipe(take(1))\n      .subscribe((session: Token) => {\n        this.session.emit(session);\n        this.loginModal.hide();\n      }, (err) => {\n        this.toastr.error(get(err, 'error.message') || 'Apologize. Something happened ...');\n      })\n      .add(() => {\n        this.loading = false;\n      });\n  };\n}\n","<div bsModal\n     #loginModal=\"bs-modal\"\n     class=\"modal fade\"\n     tabindex=\"-1\"\n     role=\"dialog\"\n     [config]=\"{backdrop: 'static', keyboard: true}\"\n     aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h2 class=\"modal-title centeredTitle\">Enter email and password to login the system</h2>\n        <button type=\"button\" class=\"close\" (click)=\"loginModal.hide()\">\n          <span aria-hidden=\"true\">&times;</span>\n        </button>\n      </div>\n      <div class=\"modal-body mx-3\">\n        <form (ngSubmit)=\"login()\" ngNativeValidate>\n          <div class=\"form-group\">\n            <input [(ngModel)]=\"email\" type=\"email\" class=\"form-control\" name=\"email\" placeholder=\"Email\" [value]=\"'Harold52@hotmail.com'\"\n                   required=\"required\">\n          </div>\n          <div class=\"form-group\">\n            <input [(ngModel)]=\"password\" type=\"password\" minlength=\"6\" class=\"form-control\" name=\"password\"\n                   placeholder=\"Password\"\n                   required=\"required\">\n          </div>\n          <div class=\"form-group\">\n            <button type=\"submit\" class=\"btn btn-success btn-lg btn-block height-48\">\n              <span *ngIf=\"loading\" class=\"spinner-border\"></span>\n              <span *ngIf=\"!loading\">Log me in</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n","import {Component, EventEmitter, Output, ViewChild} from '@angular/core';\nimport {ModalDirective} from 'ngx-bootstrap/modal';\nimport {NgForm} from '@angular/forms';\nimport {ToastrService} from 'ngx-toastr';\nimport {get, omit, pickBy, identity} from 'lodash';\nimport {DataService} from '../../services/data.service';\nimport {EmployerForm, SignupPayload} from '../../models/Signup.interface';\nimport {take} from 'rxjs/operators';\n\n@Component({\n  selector: 'app-signup',\n  templateUrl: './signup.component.html',\n})\nexport class SignupComponent {\n  @Output() signedUp = new EventEmitter<string>();\n\n  @ViewChild('employerSignupModal') public employerSignupModal: ModalDirective;\n  @ViewChild('employeeSignupModal') public employeeSignupModal: ModalDirective;\n  @ViewChild('employerData') public employerData: NgForm;\n\n  constructor(private toastr: ToastrService, private httpClient: DataService) {}\n\n  public loading = false;\n  public show = (mode: 'employee' | 'employer' = 'employer') => {\n    if (mode === 'employer') {\n      this.employerSignupModal.show();\n    } else {\n      this.employeeSignupModal.show();\n    }\n  };\n\n  public register = () => {\n    this.loading = true;\n\n    // We use ngNativeValidate, only need to compare password here\n    const formValue: EmployerForm = this.employerData.form.value;\n    const {password, password2} = formValue;\n    if (password !== password2) {\n      this.toastr.error('Passwords do not match. Please retype');\n\n      return;\n    }\n\n    const payload: SignupPayload  = {\n      email: formValue.email,\n      password: formValue.password,\n      userType: 'employer',\n      employerProfile: pickBy(omit(formValue, 'email', 'password2', 'password'), identity),\n    };\n\n    return this\n      .httpClient\n      .post('users/signup', payload)\n      .pipe(take(1))\n      .subscribe(() => {\n        this.signedUp.emit(formValue.email);\n        this.employerSignupModal.hide();\n      }, (err) => {\n        this.toastr.error(get(err, 'error.message') || 'Apologize. Something happened ...');\n      })\n      .add(() => {\n        this.loading = false;\n      });\n  };\n}\n","<div bsModal\n     #employerSignupModal=\"bs-modal\"\n     class=\"modal fade\" tabindex=\"-1\"\n     role=\"dialog\"\n     [config]=\"{backdrop: 'static', keyboard: true}\"\n     aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-dialog-centered\" role=\"document\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h2 class=\"modal-title centeredTitle\">Register as an employer</h2>\n        <button type=\"button\" class=\"close\" (click)=\"employerSignupModal.hide()\">\n          <i class=\"fa fa-times-circle\"></i>\n        </button>\n      </div>\n      <div class=\"modal-body mx-3\">\n        <form (ngSubmit)=\"register()\" #employerData=\"ngForm\" ngNativeValidate>\n          <div class=\"form-group\">\n            <div class=\"row\">\n              <div>\n                <input ngModel type=\"text\" maxlength=\"50\" class=\"form-control\" name=\"firstName\" placeholder=\"First Name\"\n                       required></div>\n              <div>\n                <input ngModel type=\"text\" maxlength=\"50\" class=\"form-control\" name=\"lastName\" placeholder=\"Last Name\"\n                       required=\"required\"></div>\n            </div>\n          </div>\n          <div class=\"form-group\">\n            <input ngModel type=\"email\" class=\"form-control\" name=\"email\" placeholder=\"Email\" required=\"required\">\n          </div>\n          <div class=\"form-group\">\n            <input ngModel class=\"form-control\" name=\"companyName\" placeholder=\"Company name\" required=\"required\">\n          </div>\n          <div class=\"form-group\">\n            <input\n              ngModel\n              class=\"form-control\"\n              name=\"companyNumber\"\n              placeholder=\"Company number\"\n              pattern=\"^\\d+$\"\n              title=\"A sequence of numbers\"\n              required=\"required\">\n          </div>\n          <div class=\"form-group\">\n            <input ngModel class=\"form-control\" name=\"landline\" placeholder=\"Land-line number\">\n          </div>\n          <div class=\"form-group\">\n            <input ngModel class=\"form-control\" name=\"mobile\" placeholder=\"Mobile number\">\n          </div>\n          <div class=\"form-group\">\n            <input ngModel type=\"url\" class=\"form-control\" name=\"website\" placeholder=\"Company website\">\n          </div>\n          <div class=\"form-group\">\n            <input ngModel type=\"password\" minlength=\"6\" class=\"form-control\" name=\"password\" placeholder=\"Password\" required=\"required\">\n          </div>\n          <div class=\"form-group\">\n            <input ngModel type=\"password\" minlength=\"6\" class=\"form-control\" name=\"password2\" placeholder=\"Confirm Password\"\n                   required=\"required\">\n          </div>\n          <div class=\"form-group padding6\">\n            <label class=\"checkbox-inline\">\n              <input type=\"checkbox\" required=\"required\">\n              I accept the <a href=\"#\">Terms of Use</a> &amp; <a href=\"#\">Privacy Policy</a>\n            </label>\n          </div>\n          <div class=\"form-group\">\n            <button type=\"submit\" class=\"btn btn-success btn-lg btn-block\">\n              <span *ngIf=\"loading\" class=\"spinner-border\"></span>\n              <span *ngIf=\"!loading\">Register Now</span>\n            </button>\n          </div>\n        </form>\n      </div>\n    </div>\n  </div>\n</div>\n\n<div bsModal #employeeSignupModal=\"bs-modal\" class=\"modal fade\" tabindex=\"-1\"\n     role=\"dialog\" aria-labelledby=\"myLargeModalLabel\" aria-hidden=\"true\">\n  <div class=\"modal-dialog modal-dialog-centered\">\n    <div class=\"modal-content\">\n      <div class=\"modal-header\">\n        <h4 class=\"modal-title centeredTitle\">Register as a candidate</h4>\n        <button type=\"button\" class=\"close pull-right\" (click)=\"employeeSignupModal.hide()\" aria-label=\"Close\">\n          <i class=\"fa fa-times-circle\"></i>\n        </button>\n      </div>\n      <div class=\"modal-body text-center\">\n        This is not yet supported. Sorry for the inconvience.\n      </div>\n    </div>\n  </div>\n</div>\n","import { Component, OnInit } from '@angular/core';\n\n@Component({\n  selector: 'app-topnav',\n  templateUrl: './topNavigation.component.html',\n})\nexport class TopNavigationComponent implements OnInit {\n\n  constructor() { }\n\n  ngOnInit(): void {\n  }\n\n}\n","import {Injectable} from '@angular/core';\nimport {HttpClient} from '@angular/common/http';\nimport {environment} from '../../environments/environment';\nimport {Observable} from 'rxjs';\nimport {Token} from '../models/Signup.interface';\n\n@Injectable({\n  providedIn: 'root'\n})\nexport class DataService {\n  private host = environment.host;\n  private token: string;\n  private userId: string;\n\n  constructor(private client: HttpClient) {}\n\n  public post = (route: string, payload: any|null = null, config?): Observable<object> => {\n    return this\n      .client\n      .post(`${this.host}/${route}`, payload, {\n        responseType: 'json',\n        headers: {\n          ...config && config.headers,\n          ...this.token && {\n            authorization: `Bearer ${this.token}`\n          }\n        },\n        ...config,\n      });\n  };\n\n  public get = (route: string, config?): Observable<object> => {\n    return this\n      .client\n      .get(`${this.host}/${route}`, {\n        responseType: 'json',\n        headers: {\n          ...config && config.headers,\n          ...this.token && {\n            authorization: `Bearer ${this.token}`\n          }\n        },\n        ...config,\n      });\n  };\n\n  public getUserProfile(): Observable<object> {\n    return this\n      .client\n      .get(`${this.host}/users/${this.userId}`, {\n        responseType: 'json',\n        headers: {\n          authorization: `Bearer ${this.token}`\n        },\n      });\n  }\n\n  public saveSession(session: Token): void {\n    this.userId = session.id;\n    this.token = session.token;\n  }\n\n  public reset(): void {\n    this.token = undefined;\n    this.userId = undefined;\n  }\n\n  public get inSession(): boolean {\n    return !!this.token;\n  }\n}\n","// This file can be replaced during build by using the `fileReplacements` array.\n// `ng build --prod` replaces `environment.ts` with `environment.prod.ts`.\n// The list of file replacements can be found in `angular.json`.\n\nexport const environment = {\n  production: false,\n  host: 'https://farmer-recruitment.azurewebsites.net',\n};\n\n/*\n * For easier debugging in development mode, you can import the following file\n * to ignore zone related error stack frames such as `zone.run`, `zoneDelegate.invokeTask`.\n *\n * This import should be commented out in production mode because it will have a negative impact\n * on performance if an error is thrown.\n */\n// import 'zone.js/dist/zone-error';  // Included with Angular CLI.\n","import {enableProdMode} from '@angular/core';\nimport {platformBrowserDynamic} from '@angular/platform-browser-dynamic';\n\nimport {AppModule} from './app/app.module';\nimport {environment} from './environments/environment';\n\nif (environment.production) {\n  enableProdMode();\n}\n\nplatformBrowserDynamic()\n  .bootstrapModule(AppModule)\n  .catch(console.error);\n"]}